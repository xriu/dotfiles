---
description:
globs:
alwaysApply: true
---
---
description: Project structure and file organization guidelines
globs:
alwaysApply: true
---

# Project Structure Guide

This repository contains multiple AWS CDK and Serverless projects. Here's how they are organized:

## Main Project Types

### AWS CDK Projects
Located in `projects/aws-cdk/`:
- Each project follows TypeScript CDK patterns
- Uses `src/` directory for source code
- Includes `bin/`, `lib/`, and `lambda/` subdirectories
- Configuration in `src/lib/config/`

Example structure from [projects/aws-cdk/dispatch-backup/src/lib/config/environment.ts](mdc:projects/aws-cdk/dispatch-backup/src/lib/config/environment.ts):
```typescript
const environments: { [key: string]: Environment } = {
  staging: {
    vpc: { ... },
    securityGroups: [...],
    stage: 'staging',
    team: 'SRE',
    product: 'platform',
    aws: [{ account: '...', region: '...' }]
  }
};
```

### Serverless Projects
Located in `projects/serverless/`:
- Each project has its own `environment/` directory
- Contains environment-specific configurations
- Uses `src/` for source code
- Includes AWS and Azure implementations

## Project Organization

### Common Patterns
1. Environment Configuration:
   - Always in `config/` or `environment/` directories
   - Separate configs for dev, staging, and prod

2. Source Code:
   - TypeScript/JavaScript in `src/`
   - Tests alongside source in `__tests__/`
   - Lambda functions in `lambda/` or `functions/`

3. Infrastructure:
   - CDK stacks in `lib/stacks/`
   - Constructs in `lib/constructs/`
   - Serverless configs in `environment/{stage}/`

## Best Practices
1. Keep environment configurations separate
2. Place tests only if resides in `src/`
3. Use TypeScript for type safety
4. Follow the established directory structure
5. Keep infrastructure code separate from application code
