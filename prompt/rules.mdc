---
description:
globs:
alwaysApply: true
---
---
description:
globs:
alwaysApply: false
---
# Rules Location, Structure, and Best Practices

## 1. Where to Place Rules
- Always place rule files in `.cursor/rules/` in the project root:
  ```
  .cursor/rules/
  ├── your-rule-name.mdc
  ├── another-rule.mdc
  └── ...
  ```
- Never place rule files:
  - In the project root
  - In subdirectories outside `.cursor/rules`
  - In any other location

## 2. Naming Conventions
- Use kebab-case for filenames
- Always use `.mdc` extension
- Make names descriptive of the rule's purpose

## 3. Required Rule Structure
- Every rule file must start with a YAML frontmatter block:
  ```markdown
  ---
  description: Clear, one-line description of what the rule enforces
  globs: path/to/files/*.ext, other/path/**/*
  alwaysApply: boolean
  ---
  ```
- After the frontmatter, use markdown for the rule content.
- Start with a high-level overview, then actionable requirements, then examples.

## 4. Formatting and Content Guidelines
- Use bullet points for clarity
- Keep descriptions concise
- Include both DO and DON'T examples
- Reference actual code over theoretical examples
- Use language-specific code blocks:
  ```typescript
  // ✅ DO: Show good examples
  const goodExample = true;
  // ❌ DON'T: Show anti-patterns
  const badExample = false;
  ```
- Use `](mdc:path/to/file)` to reference files
- Reference other rules when possible to keep rules DRY

## 4.1 JSDoc Comments Requirement

- All functions, classes, and methods in JavaScript and TypeScript files **must** include a JSDoc comment immediately above their definition.
- JSDoc comments should describe the purpose, parameters, and return value of the function/class/method.
- This is enforced as a best practice for code readability, maintainability, and IDE support.
- Use the standard JSDoc format:
  ```js
  /**
   * Brief description of what the function/class does.
   * @param {type} paramName - Description
   * @returns {type} Description
   */
  function myFunction(param1, param2) {
    // ...
  }
  ```
- For TypeScript, you may omit type annotations in JSDoc if they are redundant, but the description and parameter names are still required.
- Tools like ESLint with `eslint-plugin-jsdoc` can be used to enforce this rule automatically.

### Examples

```typescript
// ✅ DO: Use JSDoc for functions
/**
 * Adds two numbers together.
 * @param {number} a - The first number
 * @param {number} b - The second number
 * @returns {number} The sum of a and b
 */
function add(a, b) {
  return a + b;
}

// ❌ DON'T: Omit JSDoc comments
function subtract(a, b) {
  return a - b;
}

// ✅ DO: Use JSDoc for classes
/**
 * Handles S3 operations.
 */
class S3 {
  // ...
}
```

## 5. Rule Content Example
```markdown
---
description: Short description of the rule's purpose
globs: optional/path/pattern/**/*
alwaysApply: false
---
# Rule Title

Main content explaining the rule with markdown formatting.

1. Step-by-step instructions
2. Code examples
3. Guidelines

Example:
```typescript
// Good example
function goodExample() {
  // Implementation following guidelines
}
// Bad example
function badExample() {
  // Implementation not following guidelines
}
```
